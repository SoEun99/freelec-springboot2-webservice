#Travis CI가 유료화되어 GitLab으로 마이그레이션

#workflow: 파이프라인 실행 유형 제어
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

#stages: 파이프라인 단계의 이름과 순서
stages:
  - build
  - deploy

#default: 작업 키워드에 대한 사용자 정의 기본값
default:
  cache:
    paths:
      - $HOME/.gradle
      - $HOME/.m2/repository

# JDK 24로 빌드
build:
  stage: build
  image: eclipse-temurin:24-jdk
  script:
    - ./gradlew clean build
    - zip -r freelec-springboot2-weservice *
    - mkdir -p deploy
    - mv freelec-springboot2-webservice.zip deploy/freelec-springboot2-webservice.zip

#배포 Job에서 aws 명령어를 사용해야 하니까, 해당 Job이 실행되는 이미지에 AWS CLI가 설치되어 있어야 함
deploy_S3:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  dependencies:
    - build
  script:
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - aws configure set s3_bucket_name $S3_BUCKET_NAME
    - aws s3 cp deploy/*.zip s3://$S3_BUCKET_NAME/ --acl private

# 전역 키워드
#  workflow: 파이프라인 실행 유형 제어
#  include: 다른 YAML 파일에서 구성 가져오기
#  variables: 파이프라인의 모든 작업에 대한 CI/CD 변수 정의
#  stages: 파이프라인 단계의 이름과 순서
#  default: 작업 키워드에 대한 사용자 정의 기본값

# 헤더 키워드
#  spec: 외부 구성 파일에 대한 사양 정의

# 작업과 작업 키워드
#  after_script: 작업 후 실행되는 명령 집합을 재정의
#  allow_failure: 작업이 실패할 수 있도록 허용. 실패한 작업은 파이프라인이 실패하는 원인이 되지 않음
#  artifacts: 성공한 작업에 첨부할 파일과 디렉토리 목록
#  before_script: 작업 이전에 실행되는 명령 집합을 재정의
#  cache: 후속 실행 간에 캐시해야 할 파일 목록
#  coverage: 특정 작업에 대한 코드 커버리지 설정
#  dast_configuration: 작업 수준에서 DAST 프로파일의 구성을 사용
#   DAST = Dynamic Application Security Testing, 웹 App이 실행 중일 때(런타임 상태) 외부 공격자 관점에서 취약점을 찾는 보안테스트 방식
#  dependencies: 아티팩트를 가져올 작업 목록을 제공하여 특정 작업으로 전달되는 아티팩트를 제한
#  environment: 작업이 배포되는 환경의 이름
#  extends: 이 작업이 상속하는 구성 항목
#  identity: ID 연합을 사용하여 제3자 서비스에 대한 인증을 수행
#  image: Docker 이미지를 사용
#  inherit: 모든 작업이 상속받는 전역 기본값을 선택
#  interruptible: 새 실행으로 인해 중복될 경우 작업이 취소될 수 있는지 정의
#  manual_confirmation: 수동 작업에 대한 사용자 정의 확인 메시지를 정의
#  needs: 단계 순서보다 먼저 수행할 작업
#  pages: 작업 결과를 GitLab Pages에서 사용할 수 있도록 업로드
#  parallel: 어떻게 많은 인스턴스의 작업이 병렬로 실행되어야 하는지 설정
#  release: 러너에게 릴리스 객체를 생성하도록 지시
#  resource_group: 작업 동시성을 제한
#  retry: 실패 시 작업이 자동으로 재시도될 수 있는 경우와 횟수
#  rules: 작업의 선택된 속성을 결정하기 위해 평가되는 조건 목록과 작업이 생성되는지 여부
#  script: 러너에 의해 실행되는 셸 스크립트
#  run: 러너에 의해 실행되는 구성
#  secrets: 작업에 필요한 CI/CD 비밀
#  services: Docker 서비스 이미지를 사용
#  stage: 작업 단계를 정의
#  tags: 러너를 선택하는 데 사용되는 태그 목록
#  timeout: 프로젝트 전역 설정보다 우선하는 사용자 정의 작업 수준의 타임아웃을 정의
#  trigger: 하위 파이프라인 트리거를 정의
#  variables: 작업 수준에서 작업 변수를 정의
#  when: 작업을 실행할 시기