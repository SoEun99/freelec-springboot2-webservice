# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUCKET_NAME: freelec-springboot2-webservice-test-test-test
      AWS_REGION: ap-southeast-2
    permissions:
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 1.8-1.0-SNAPSHOT-plain
        path: build/libs

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

# GitHub Artifacts -> 러너로 다운로드
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: 1.8-1.0-SNAPSHOT-plain
        path: dist/

#    - name: Configure AWS credentials (OIDC)
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        role-to-assume: arn:aws:iam::862344888488:user/springboot2-webservice-tester
#        aws-region: ap-southeast-2

# Sample workflow to access AWS resources when workflow is tied to branch
    - name: Git clone the repository
      uses: actions/checkout@v5

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
      with:
        role-to-assume: arn:aws:iam::862344888488:user/springboot2-webservice-tester
        aws-region: ap-southeast-2

      # Upload a file to AWS s3
    - name: Copy index.html to s3
      run: |
        aws s3 cp ./index.html s3://${{ env.BUCKET_NAME }}/


#S3 업로드
#    - name: Upload artifact to S3
#      env:
#        S3_BUCKET: freelec-springboot2-webservice-test-test-test
#      run: |
#          set -e
#          FILE=$(ls app/build/libs/*.jar | head -n1)
#          echo "Uploading $FILE to s3://$S3_BUCKET/$S3_KEY_PREFIX/"
#          aws s3 cp "$FILE" "s3://$S3_BUCKET/$S3_KEY_PREFIX/$(basename "$FILE")" \
#            --content-type application/java-archive \
#            --cache-control "no-cache"
#

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

# GitLab Generic Package Registry로 업로드
#    - name: Push to GitLab Generic Package Registry
#      env:
#        GITLAB_URL: https://gitlab.com                # 자가호스팅이면 해당 URL로 교체
#        GITLAB_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}   # GitLab 프로젝트 ID (정수)
#        GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}             # GitLab Personal Access Token (api 권한)
#        PKG_NAME: 1.8-1.0-SNAPSHOT-plain
#        PKG_VER: ${{ github.run_number }}                     # 버전 규칙은 자유
#      run: |
#            set -e
#            FILE=$(ls dist/* | head -n1)
#            BASENAME=$(basename "$FILE")
#            curl --fail --show-error --location \
#              --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
#              --upload-file "$FILE" \
#              "$GITLAB_URL/api/v4/projects/$GITLAB_PROJECT_ID/packages/generic/$PKG_NAME/$PKG_VER/$BASENAME"
#            echo "Uploaded: $BASENAME -> $GITLAB_URL/api/v4/projects/$GITLAB_PROJECT_ID/packages/generic/$PKG_NAME/$PKG_VER/$BASENAME"
